%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Autex\Desktop\Vlad\Logger\build-Logger-Desktop_Qt_5_3_MinGW_32bit-Debug\log.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/04/30 16:23:20

%% Initialize variables.
filename = 'C:\Users\Autex\Desktop\Vlad\Logger\build-Logger-Desktop_Qt_5_3_MinGW_32bit-Debug\log6.txt';

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%4f%2f%5f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

% %% Post processing for unimportable data.
% % No unimportable data rules were applied during the import, so no post
% % processing code is included. To generate code which works for
% % unimportable data, select unimportable cells in a file and regenerate the
% % script.
% 
% %% Create output variable
% log = [dataArray{1:end-1}];
% %% Clear temporary variables
% clearvars filename formatSpec fileID dataArray ans;
% 
% %% Initialize variables.
% filename = 'C:\Users\Autex\Desktop\Vlad\Logger\build-Logger-Desktop_Qt_5_3_MinGW_32bit-Debug\forcemes.txt';
% delimiter = ' ';
% 
% %% Format string for each line of text:
% %   column1: double (%f)
% %	column2: double (%f)
% % For more information, see the TEXTSCAN documentation.
% formatSpec = '%f%f%[^\n\r]';
% 
% %% Open the text file.
% fileID = fopen(filename,'r');
% 
% %% Read columns of data according to format string.
% % This call is based on the structure of the file used to generate this
% % code. If an error occurs for a different file, try regenerating the code
% % from the Import Tool.
% dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);
% 
% %% Close the text file.
% fclose(fileID);
% 
% %% Post processing for unimportable data.
% % No unimportable data rules were applied during the import, so no post
% % processing code is included. To generate code which works for
% % unimportable data, select unimportable cells in a file and regenerate the
% % script.
% 
% %% Create output variable
% forcemes = [dataArray{1:end-1}];
% %% Clear temporary variables
% clearvars filename delimiter formatSpec fileID dataArray ans;

y = size(log);
count = 200;
sum = 0;
j = 0;
graph = 5;
i = y(1);
while (i > 0)
    if ((log(i, 1) < 1100))
        log(i, :) = [];
        i = i - 1;
        continue;
    end;
    while ((log(i, 1) == log(i-1, 1)) && (count > 0))
        sum = sum + log(i, 4);
        i = i - 1;
        count = count - 1;
    end
    if (count == 0)
        if  log(i,1) == 1000 
            break;
        end;
        while ((log(i, 1) == log(i-1, 1)))
            i = i - 1;
        end
    end
    j = j + 1;
 
        graph(j, 1) = log(i, 1);
        graph(j, 2) = sum/(200 - count);
    sum = 0;
    count = 200;
    i = i - 1;
end;

i = j;
while i > 0
%     if ((graph(i, 1) < 1100))
%         graph(i, :) = [];
%         i = i - 1;
%         continue;
%     end;
    graph(i, 2) = 60*8*10^6/(7*graph(i, 2));
    i = i - 1;
end;

y = size(log);
i = 1;
while (i <= y(1))
    time(i, 1) = 5 * i;
    i = i + 1;
end;

% graph(:, 1) = flipud(graph(:, 1));
% graph(:, 2) = flipud(graph(:, 2));
% graph(:, 3) = forcemes(:, 2)/(29/7.5);
% plot(graph(:, 1), graph(:,2));
%plotyy(time, log(:, 1), time, 60*8*10^6./log(:, 4));
% X = graph(1:13, 1);
% Y = graph(1:13, 3);
% plot(graph(1:13, 1), graph(1:13,3))
% plot(graph(:, 2), graph(:,3))
clearvars time;